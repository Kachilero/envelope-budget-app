import { app, BrowserWindow } from 'electron';
import installExtension, { REACT_DEVELOPER_TOOLS } from "electron-devtools-installer";

const Store = require('electron-store');
const nano = require('nano')('http://localhost:5984');
const store = new Store();

/**
 *  This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
 *  plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
 *  whether you're running in development or production).
*/
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

/**
 *  Handle creating/removing shortcuts on Windows when installing/uninstalling.
 *  */
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

/**
 * This method will be called when Electron has finished initialization and is ready to create browser windows.
 *  Some APIs can only be used after this event occurs.
 * This is also an EVENT LISTENER, so only 1 callback is ran and could be missed if process starts too early, see:
 * @link https://www.electronjs.org/docs/latest/api/app#event-ready
 */
app.on('ready', createWindow);

/**
 * Similar to `app.on('ready', () => {})`, except this is a promise
 * @link https://www.electronjs.org/docs/latest/api/app#appwhenready
  * */
app.whenReady().then(() => {
  installExtension(REACT_DEVELOPER_TOOLS)
    .then((name) => console.log(`%cAdded Extension: %c${name}`, 'color:orange', 'color:lightgreen'))
    .catch((err) => {
      console.log(`%cERROR installing DEV_TOOLS: `, 'color:red', err);
    })
})

/**
 *  Quit when all windows are closed, except on macOS.
 * There, it's common for applications and their menu bar to stay active until the user quits
 * explicitly with Cmd + Q.
 */
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

/**
 * Electron Store
 * */

